
# coding: utf-8

# In[316]:


import numpy as np
import math
import random
from functools import reduce


# In[317]:


pop_size = 50
x = np.zeros((pop_size,16))
for i in range(0,pop_size):
    x[i] = np.random.randint(2, size=16)
cross_prob  = 0.8
mut_prob = 0.2
max_iter = 50
min_obj = 0
fitness = np.zeros((pop_size,1))


# In[318]:


def bin_to_dec(x):
    x1 = x[:8]
    x2 = x[8:16]
    x1_int = reduce(lambda a,b: 2*a+b, x1.T)
    x2_int = reduce(lambda a,b: 2*a+b, x2.T)
    return x1_int,x2_int


# In[319]:


def obj(x):
    sum1 = 0
    sum2 = 0 
    x1 = x[0]
    x2 = x[1]
    for i in range(0,5):
        sum1 = sum1 + i*np.cos(np.dot((i+1),x1) + i)
    for i in range(0,5):
        sum2 = sum2 + i*np.cos(np.dot((i+1),x2) + i)
    sums = sum1*sum2
    return 2*sums


# In[320]:


def crossover(parent1,parent2):
    n1 = random.randint(0,16)
    n2 = random.randint(0,16)
    if(n1<n2):
        for i in range(n1,n2):
            temp = parent1[i]
            parent1[i] = parent2[i]
            parent2[i] = temp
    else:
        for i in range(n2,n1):
            temp = parent1[i]
            parent1[i] = parent2[i]
            parent2[i] = temp
    return parent1,parent2


# In[321]:


def mutation(x):
    rand_muts = np.random.rand(10,16)
    x[rand_muts<0.2] = 1 - x[rand_muts<0.2]


# In[322]:


def tournament_selection(x):
    result = np.zeros((pop_size,16))
    global min_obj
    for i in range(0,50):
        p1_index = random.randint(0,49)
        p2_index = random.randint(0,49)
        p1_x1,p1_x2 = bin_to_dec(x[p1_index])
        p2_x1,p2_x2 = bin_to_dec(x[p2_index])
        p1 = np.array((p1_x1,p1_x2))
        p2 = np.array((p2_x1,p2_x2))
        fit1 = obj(p1)
        fit2 = obj(p2)
        if(fit1<=fit2):
            result[i] = x[p1_index]
            fitness[i] = fit1
            min_obj = min(min_obj,fit1)
        else:
            result[i] = x[p2_index]
            fitness[i] = fit2
            min_obj = min(min_obj,fit2)
    return result


# In[323]:


fit_iter = np.zeros(100)
for i in range(0,100):
    ##### Mating Pool via tournament selection
    mating_pool = tournament_selection(x)
    #### Crossover of first 40
    for i in range(0,40,2):
        print
        mating_pool[i],mating_pool[i+1] = crossover(mating_pool[i],mating_pool[i+1])
    ##### Mutation of last 10
    mutation(mating_pool[40:,:])
    x = mating_pool
    fit_iter[i] = min_obj


# In[324]:


min_obj

